import random
from fasthtml.common import *

from domain import *

lobby = Lobby(
    1,
    False,
    {},
    None,
    WordPack(
        name="default",
        words=["–∫—Ä–∏–Ω–∂","–∫—Ä–∏–Ω–≥–µ","–∫—É–∫–æ–∂","–∫—Ä–∏–ø–æ—Ç–∞","—Ñ–ª–µ–∫—Å","—Ç—è–Ω","–∫—É–Ω","–∫—É–∫–æ–ª–¥","—Ä–µ–π–≤","–∏–≤–µ–Ω—Ç","–∞–π–∫–æ—Å","–∞—à–∫–∞","–ø–æ–¥–∏–∫","—Å–Ω—é—Å","–≤–∫–∏–¥","—Å—Ç–∞—Ñ—Ñ","Garage","ESSA","—Å–∏–¥—Ä","—ç–Ω–µ—Ä–≥–æ—Å","–±–∏–ø–æ–ª—è—Ä–æ—á–∫–∞","–ø–æ–≥—Ä–∞–Ω–∏—á–∫–∞","–°–î–í–ì","–∞—É—Ç–∏–∑–º","–†–ü–ü","—Ç—Ä—ç—à","—Ö–∞–π–ø","—Ö–µ–π—Ç","–≤—Å—Ä–∞—Ç—ã–π","–∞–≥—Ä–∏—Ç—å—Å—è","–±—É–ª–ª–∏—Ç—å","—Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å","—Å—Ç–∞–ª–∫–µ—Ä–∏—Ç—å","–≥–∞–º–∞—Ç—å","—É–ª—å—Ç–∞–Ω—É—Ç—å","—Ñ–æ—Ä—Å–∏—Ç—å","—à–µ–π–º–∏—Ç—å","–±–∞–π—Ç–∏—Ç—å","—Ö–µ–π—Ç–∏—Ç—å","—á–µ–∫–∞—Ç—å","—é–∑–∞—Ç—å","—Ñ–ª–µ–π–º–∏—Ç—å","—Å–≤–∞–π–ø–∏—Ç—å","–Ω—è—à–∏—Ç—å—Å—è","–∑–∞—Å–∫–∞–º–∏—Ç—å","—Å–∞–±–∏—Ç—å","–ª–∏–≤–Ω—É—Ç—å","–æ—Ñ—Ñ–Ω—É—Ç—å","–º—É—Ä—á–∞—Ç—å","—á–∏–ª–∏—Ç—å","—Ñ–æ–ª–ª–æ–≤–∏—Ç—å","—à–∏–ø–ø–µ—Ä–∏—Ç—å","—Å—Ç—ç–Ω–∏—Ç—å","–∞–±—å—é–∑","–±—É–ª–ª–∏–Ω–≥","–≥–∞–∑–ª–∞–π—Ç–∏–Ω–≥","–±–æ–¥–∏—à–µ–π–º–∏–Ω–≥","—Å–ª–∞—Ç—à–µ–π–º–∏–Ω–≥","–≤–∏–∫—Ç–∏–º–±–ª–µ–π–º–∏–Ω–≥","–≥–æ—Å—Ç–∏–Ω–≥","—Ö–∞—Ä–∞—Å—Å–º–µ–Ω—Ç","—Å–µ–ª—Ñ—Ö–∞—Ä–º","–∑–∞—à–∫–≤–∞—Ä","—Ä–∏–ª–∏","–∏–∑–∏","—Å–∫–∞–º","–Ω—é–¥—Å—ã","—Ç–∏–∫—Ç–æ–∫","—Ñ–∞—Å—Ç","–∫—Ä–∞—à","—Å–∏–º–ø","–Ω–æ—Ä–º–∏—Å","—Ç–æ–∫—Å–∏–∫","–¥–Ω–æ–∫–ª","—à–º–æ—Ç","Thrasher","—Å–≤–∏—Ç—à–æ—Ç","—á–æ–∫–µ—Ä","–ø–∞–ª—å","–º–µ—Ä—á","–¥—Ä–µ–π–Ω–µ—Ä","¬´–†—ë–¥–∞–Ω¬ª","zxc","—Ä–æ—Ñ–ª","–ª–º–∞–æ","–º–µ–º","–ø–æ—Å—Ç–∏—Ä–æ–Ω–∏—è","—á–µ–ª–ª–µ–Ω–¥–∂","–∞–Ω–±–æ–∫—Å–∏–Ω–≥","–∞—É—Ñ","—Å–∞–±–∂","POV","—Å—É–µ—Ç–æ–ª–æ–≥","–¥—É–º–µ—Ä","—Å–∫—É—Ñ","–∏–Ω—Ü–µ–ª","—Ö–µ–π—Ç–µ—Ä","—Ö–∏–∫–∫–∞","—Ö–æ—É–º—Å—Ç–∞–∫–µ—Ä","–∞–ª—å—Ç—É—à–∫–∞","–¥–µ–¥–∏–Ω—Å–∞–π–¥","–∞–Ω–∏–º–µ—à–Ω–∏–∫","–∞—É—Ç–∏—Å—Ç","—Å–æ—É–ª–º–µ–π—Ç","—Ö–æ—É–º–∏","–∞–±—å—é–∑–µ—Ä","—Ä–µ—Å–µ–ª–ª–µ—Ä","—Ç–∏–ø–∏–∫–∞–ª","–ª–∏—Ç–µ—Ä–∞–ª–ª–∏","—Ö–æ—Ä–Ω–∏","—ç—â–∫–µ—Ä–µ","—Å–∞—Å–Ω—ã–π","–ª–∞–º–ø–æ–≤—ã–π","—á–∞–π–ª–¥—Ñ—Ä–∏","–ø–æ–∑–µ—Ä","–æ—Ñ–Ω–∏–∫","–¥—É—à–Ω–∏–ª–∞","—Ñ–µ–º–±–æ–π","–ª–∏—á–∏–Ω—É—Å","–∫–∞—Ä–µ","–ø–∞—Ä–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏","–õ–ü","–ß–°–í","–∫–∞—Ç–∫–∞","Fortnite","Roblox","VALORANT","CS:GO","PUBG Mobile","Phasmophobia","Brawl Stars","Genshin Impact","Among Us","–ö—É–ø–ª–∏–Ω–æ–≤","Booster","–ö—É—Ä—Å–µ–¥","–ë—Ä–∞—Ç–∏—à–∫–∏–Ω","–î–∞–Ω—è –ú–∏–ª–æ—Ö–∏–Ω","–î–æ—Ä–∞","–¥–æ—Ä–∞–º–∞","MORGENSTERN","FACE","PHARAOH","¬´–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è¬ª","Scally Milano","uglystephan","–ü–æ—à–ª–∞—è –ú–æ–ª–ª–∏","–∫–∏—Å-–∫–∏—Å","–î–∞–π—Ç–µ –¢–∞–Ω–∫ (!)","–ü–æ—Ä–Ω–æ—Ñ–∏–ª—å–º—ã","–ò–Ω—Å—Ç–∞—Å–∞–º–∫–∞","OG Buda","xxxtentacion","BTS","–ë–∏–ª–ª–∏ –ê–π–ª–∏—à","The Weeknd","$uicideBoy$","M√•neskin","k-pop","–≥—Ä–∞–π–º","—Å–∏–Ω—Ç–∏–ø–æ–ø","—Ñ–æ–Ω–∫","slowed + reverb","–≤–∞–π–±","—Å–≤—ç–≥","–ø–∞–Ω—á","–ø–æ–ø–∏—Ç","—Å–∏–º–ø–ª-–¥–∏–º–ø–ª","—Ñ—Ä–µ–Ω–¥–∑–æ–Ω–∞","–∞–∫—Ç—É–∞–ª–æ—á–∫–∞","–∏–Ω—Ñ–∞-—Å–æ—Ç–∫–∞","–±–∞–∑–∞","–º—É–≤","–º—É–¥","—Ç–µ–π–∫","—Ñ–∏–¥–±—ç–∫","–≥–æ—É","–º—å—é—Ç","–∏–Ω–≤–∞–π—Ç","—Ç—Ä–∞–±–ª","—Ñ–∞–∫–∞–ø","—Ñ–∞–Ω—Ñ–∏–∫","—Å–∫–∏–ª–ª","–ø—Ä—É—Ñ","—Å–ª–∏–≤","—Ç–≥–∫","–∫—É","–∫–µ–∫","gg","–∞–±–æ–±—É—Å","—Å–æ–π–¥–∂–µ–∫","–≥–∏–≥–∞—á–∞–¥","–æ—Ä–µ–≤–æ","–∂–∏–∑–∞","—Ä–∏–ª","–ø–æ—á","–∂—ë—Å—Ç–∫–∏–π –ø–æ–Ω","–ø–∂","—Å–æ—Ä—è–Ω","—Ç–æ–ø","–ø—Ä–∏–≤","–ª–∏—á–∫–∞","—à–∫–∏–ª–∞","—Å–µ–º–ø–∞–π","–≥–µ–Ω–¥–µ—Ä","–¥—Ä–µ–π–Ω","—Å—Ç—Ä–µ–π—Ç","–∞–ª—å—Ç","reels","–•–∏–ª–º–∏","–Æ–ª—è –§–∏–Ω–µ—Å—Å","–í–∞–ª—è –ö–∞—Ä–Ω–∞–≤–∞–ª","–ï–≥–æ—Ä –®–∏–ø","–ê–Ω—è –ü–æ–∫—Ä–æ–≤","–ê—Ä—Ç—É—Ä –ë–∞–±–∏—á","–Æ–ª—è –ì–∞–≤—Ä–∏–ª–∏–Ω–∞","–í–ª–∞–¥ –ê4","MrBeast"]
    ))
users = lobby.users

scr = Script(src="https://unpkg.com/hyperscript.org@0.9.13")
app, rt = fast_app(exts='ws', hdrs=[scr])
app: FastHTML


def UsersList(users):
    if not users: return Div("Empty lobby")
    return Div(
        P("Users: "),
        Ul(*[Li(f"User {u.name} - {u.points}") for u in users.values()]),
        id='usr-list')


def on_conn(ws, scope, send):
    uname = ws.cookies.get('name', None)
    uname =  base64.b64decode(uname[2:-1]).decode('utf-8') if uname else 'NONE'
    users[str(id(ws))] = User(name=uname, points=0, send=send)


async def on_disconn(ws):
    del users[str(id(ws))]
    # for u in users.values(): await u.send(UsersList(users))

async def start_handler(ws, data):
    round = lobby.start_game()
    guesser = round.guesser
    explainer = round.explainer
    for u in users.values():
        await u.send(LobbyState(lobby, u))


async def join_handler(ws, data: dict):
    name: str = data['name']
    users[str(id(ws))].name = name
    for u in users.values(): await u.send(UsersList(users))
    u = users[str(id(ws))]
    await u.send(Script(f'document.cookie = "name={base64.b64encode(name.encode('utf-8'))}; path=/;";', id="name_script"))


async def guess_handler(ws, data: dict):
    guess = data['guess'] == 'true'
    lobby.end_round(guess)
    # time.sleep(10)
    await start_handler(ws, data) # –°–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É

async def submit_mine_handler(ws, data: dict):
    word = data['name']
    round = lobby.round
    round.add_mine(Mine(word, False, users[str(id(ws))]))
    for u in users.values():
        await u.send(LobbyState(lobby, u)) # –ø–æ—Ç–æ–º)

handlers = {
    'start': start_handler,
    'join': join_handler,
    'guess': guess_handler,
    'submit mine': submit_mine_handler
}


@app.ws("/ws", conn=on_conn, disconn=on_disconn)
async def ws(ws, data, send):
    await handlers[data['action']](ws, data)


@rt('/')
def get():
    return Redirect('/lobby')


def WsButton(key, value, *args, name='', **kwargs):
    return Form(
        *args,
        Input(type="hidden", value=value, name=key),
        Input(type="submit", value=name),
        ws_send=True, **kwargs)

def can_see_mines(round: Round, user: User):
    return not user is round.explainer and not user is round.guesser

def Mines(round: Round, user: User):
    mines = round.mines
    return Div(
        *[Card(
            Div(
                mine.word,
                P("üí•" if mine.triggered else "‚úÖ"),
                
                ) if round.state == "ENDED" or can_see_mines(round, user) else 'XXX',
            header=f"{mine.user.name}'s Mine", id=f"mine-{i}") 
          for i, mine in enumerate(mines)], 
        id='mines')

def CreateMineForm(round: Round, user: User):
    if not can_see_mines(round, user): return Container(id='mine-form')

    for mine in round.mines:
        if mine.user == user: return Container(id='mine-form')
    
    return Container(
        P("Enter wordmine:"),
            WsButton("action", "submit mine", 
                     Input(type="text", name="name"),
                     name="Submit mine"), 
            id='mine-form'
    )
    

def Game(round, user: User = False, id="game"):
    is_explainer = round.explainer == user
    is_guesser = round.guesser == user
    word = round.word if not is_guesser else 'XXX'

    if round.state == "GUESSING":
        controls = Div(
            WsButton("action", "guess",
                Input(type="hidden", value='true', name='guess'),
                name="Word is correct"),
            WsButton(
                "action", "guess", 
                Input(type="hidden", value='false', name='guess'),
                name="Word is incorrect"),
        ) if is_explainer else None
    elif round.state == "MINING":
        controls = CreateMineForm(round, user)
    return Container(H2(f"Word: {word}"), controls, id=id)

def LobbyState(lobby: Lobby, user: User):
    round = lobby.round
    is_started = H2("Game started!" if lobby.started else "Game not started", id='started')
    round_status = H3(f"STATUS: {round.state  if round else 'NULL'}", id='round_status')
    guesser = P(f"Guesser: {round.guesser.name if round else 'No one'}", id='guesser')
    explainer = P(f"Explainer: {round.explainer.name  if round else 'No one'}", id='explainer')
    game = Game(round, user, id='game') if round and user else Div(id='game')
    usr_list = UsersList(lobby.users)
    mines = Mines(round, user) if round and user else Div(id='mines')
    return is_started, guesser, explainer, usr_list, round_status, mines, game


@rt('/lobby')
def get(sess, id: int = None):
    if not id:
        # lobby = Lobby(id, list())
        return Redirect(f'/lobby?id={1}')
    # Get all users in the lobby
    *before, after = LobbyState(lobby, None)
    return Container(
        Script(id="name_script"),
        H1(f"Lobby {id}"),
        *before,
        P("Enter your name:"),
        Form(
            Input(type="text", name="name"),
            WsButton("action", "join", name="Join"), ws_send=True
        ),
        WsButton("action", "start", name="Start game"),
        after,
        hx_ext='ws', ws_connect="/ws"
    )


serve(host="0.0.0.0")
